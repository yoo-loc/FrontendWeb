// src/services/commentService.js

// Mock data to simulate a database of comments
let mockComments = [
    {
        comment_id: 1,
        recipe_id: 1,
        user_id: 1,
        content: "This recipe was amazing! My family loved it.",
        created_at: new Date().toISOString(),
    },
    {
        comment_id: 2,
        recipe_id: 1,
        user_id: 2,
        content: "I found it a bit salty, but overall great.",
        created_at: new Date().toISOString(),
    },
    {
        comment_id: 3,
        recipe_id: 2,
        user_id: 1,
        content: "Perfect dessert for a family dinner!",
        created_at: new Date().toISOString(),
    }
];

// Function to get comments for a specific recipe
export const getCommentsByRecipeId = (recipe_id) => {
    return new Promise((resolve) => {
        const comments = mockComments.filter((comment) => comment.recipe_id === recipe_id);
        setTimeout(() => {
            resolve(comments);
        }, 500); // Simulate network delay
    });
};

// Function to add a new comment to a recipe
export const addComment = (recipe_id, user_id, content) => {
    return new Promise((resolve) => {
        const newComment = {
            comment_id: mockComments.length + 1,
            recipe_id,
            user_id,
            content,
            created_at: new Date().toISOString()
        };
        mockComments.push(newComment);
        setTimeout(() => {
            resolve(newComment);
        }, 500);
    });
};

// Function to delete a comment by ID
export const deleteCommentById = (comment_id) => {
    return new Promise((resolve) => {
        mockComments = mockComments.filter((comment) => comment.comment_id !== comment_id);
        setTimeout(() => {
            resolve({ success: true });
        }, 500);
    });
};
